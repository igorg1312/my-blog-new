{"version":3,"sources":["../../../client/components/socket/socket.service.js"],"names":[],"mappings":";AACA;;AAEA,QAAQ,MAAR,CAAe,cAAf,EACG,OADH,CACW,QADX,EACqB,UAAS,aAAT,EAAwB;;AAEzC,MAAI,WAAW,GAAG,EAAH,EAAO;;;AAGpB,UAAM;AAHc,GAAP,CAAf;;AAMA,MAAI,SAAS,cAAc,EAAE,kBAAF,EAAd,CAAb;;AAEA,SAAO;AACL,kBADK;;;;;;;;;;;;AAaL,eAbK,uBAaO,SAbP,EAakB,KAblB,EAayB,EAbzB,EAa6B;AAChC,WAAK,MAAM,QAAQ,IAAnB;;;;;AAKA,aAAO,EAAP,CAAU,YAAY,OAAtB,EAA+B,UAAU,IAAV,EAAgB;AAC7C,YAAI,UAAU,EAAE,IAAF,CAAO,KAAP,EAAc,EAAC,KAAK,KAAK,GAAX,EAAd,CAAd;AACA,YAAI,QAAQ,MAAM,OAAN,CAAc,OAAd,CAAZ;AACA,YAAI,QAAQ,SAAZ;;;;AAIA,YAAI,OAAJ,EAAa;AACX,gBAAM,MAAN,CAAa,KAAb,EAAoB,CAApB,EAAuB,IAAvB;AACA,kBAAQ,SAAR;AACD,SAHD,MAGO;AACL,gBAAM,IAAN,CAAW,IAAX;AACD;;AAED,WAAG,KAAH,EAAU,IAAV,EAAgB,KAAhB;AACD,OAfD;;;;;AAoBA,aAAO,EAAP,CAAU,YAAY,SAAtB,EAAiC,UAAU,IAAV,EAAgB;AAC/C,YAAI,QAAQ,SAAZ;AACA,UAAE,MAAF,CAAS,KAAT,EAAgB,EAAC,KAAK,KAAK,GAAX,EAAhB;AACA,WAAG,KAAH,EAAU,IAAV,EAAgB,KAAhB;AACD,OAJD;AAKD,KA5CI;;;;;;;;AAmDL,iBAnDK,yBAmDS,SAnDT,EAmDoB;AACvB,aAAO,kBAAP,CAA0B,YAAY,OAAtC;AACA,aAAO,kBAAP,CAA0B,YAAY,SAAtC;AACD;AAtDI,GAAP;AAwDD,CAnEH","file":"socket.service.js","sourcesContent":["/* global io */\n'use strict';\n\nangular.module('dashboardApp')\n  .factory('socket', function(socketFactory) {\n    // socket.io now auto-configures its connection when we ommit a connection url\n    var ioSocket = io('', {\n      // Send auth token on connection, you will need to DI the Auth service above\n      // 'query': 'token=' + Auth.getToken()\n      path: '/socket.io-client'\n    });\n\n    var socket = socketFactory({ ioSocket });\n\n    return {\n      socket,\n\n      /**\n       * Register listeners to sync an array with updates on a model\n       *\n       * Takes the array we want to sync, the model name that socket updates are sent from,\n       * and an optional callback function after new items are updated.\n       *\n       * @param {String} modelName\n       * @param {Array} array\n       * @param {Function} cb\n       */\n      syncUpdates(modelName, array, cb) {\n        cb = cb || angular.noop;\n\n        /**\n         * Syncs item creation/updates on 'model:save'\n         */\n        socket.on(modelName + ':save', function (item) {\n          var oldItem = _.find(array, {_id: item._id});\n          var index = array.indexOf(oldItem);\n          var event = 'created';\n\n          // replace oldItem if it exists\n          // otherwise just add item to the collection\n          if (oldItem) {\n            array.splice(index, 1, item);\n            event = 'updated';\n          } else {\n            array.push(item);\n          }\n\n          cb(event, item, array);\n        });\n\n        /**\n         * Syncs removed items on 'model:remove'\n         */\n        socket.on(modelName + ':remove', function (item) {\n          var event = 'deleted';\n          _.remove(array, {_id: item._id});\n          cb(event, item, array);\n        });\n      },\n\n      /**\n       * Removes listeners for a models updates on the socket\n       *\n       * @param modelName\n       */\n      unsyncUpdates(modelName) {\n        socket.removeAllListeners(modelName + ':save');\n        socket.removeAllListeners(modelName + ':remove');\n      }\n    };\n  });\n"]}